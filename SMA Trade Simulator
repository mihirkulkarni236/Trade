import yfinance as yf
import pandas as pd
import matplotlib.pyplot as plt


#Fetch historical stock data
ticker = "TCS.NS"
data = yf.download(ticker, start="2020-01-01", end="2025-01-01")


#Calculate Moving Averages
short_window = 20  #20-day SMA
long_window = 50   #50-day SMA
data["SMA_20"] = data["Close"].rolling(window=short_window).mean()
data["SMA_50"] = data["Close"].rolling(window=long_window).mean()


#Generate Buy/Sell Signals
data["Signal"] = 0  # Default no signal
data.loc[data["SMA_20"] > data["SMA_50"], "Signal"] = 1  # Buy Signal
data.loc[data["SMA_20"] < data["SMA_50"], "Signal"] = -1  # Sell Signal
data["Position"] = data["Signal"].shift(1)  # Use the previous day's signal to avoid look-ahead bias


#Simulate SMA Crossover Strategy Returns
initial_capital = 1000 
data["Daily_Return"] = data["Close"].pct_change()  # Daily percentage returns of the stock
data["Strategy_Return"] = data["Position"] * data["Daily_Return"]  # Strategy's daily return based on signals
data["Strategy_Cumulative_Return"] = (1 + data["Strategy_Return"]).cumprod() * initial_capital


#Simulate Buy-and-Hold Returns
data["Buy_and_Hold_Cumulative_Return"] = (1 + data["Daily_Return"]).cumprod() * initial_capital


#Plot cumulative returns of both strategies
plt.figure(figsize=(14, 7))
plt.plot(data["Strategy_Cumulative_Return"], label="SMA Crossover Strategy", color="green")
plt.plot(data["Buy_and_Hold_Cumulative_Return"], label="Buy-and-Hold", color="blue", linestyle="--")
plt.title("Portfolio Performance: SMA Crossover vs Buy-and-Hold")
plt.xlabel("Date")
plt.ylabel("Portfolio Value")
plt.legend()
plt.grid()
plt.show()


# Display final results
final_strategy_value = data["Strategy_Cumulative_Return"].iloc[-1]
final_hold_value = data["Buy_and_Hold_Cumulative_Return"].iloc[-1]


final_strategy_value, final_hold_value
